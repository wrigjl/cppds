<?xml version="1.0" ?><section xml:id="linear-basic_palindrome-checker">
        <title>Palindrome-Checker</title>
        <p><idx>palindrome</idx>An interesting problem that can be easily solved using the deque data
            structure is the classic palindrome problem. A <term>palindrome</term> is a
            string that reads the same forward and backward, for example, <em>radar</em>,
            <em>toot</em>, and <em>madam</em>. We would like to construct an algorithm to input a
            string of characters and check whether it is a palindrome.</p>
        <p>The solution to this problem will use a deque to store the characters of
            the string. We will process the string from left to right and add each
            character to the rear of the deque. At this point, the deque will be
            acting very much like an ordinary queue. However, we can now make use of
            the dual functionality of the deque. The front of the deque will hold
            the first character of the string and the rear of the deque will hold
            the last character (see <xref ref="fig-palindrome"/>).</p>
        
        <figure xml:id="fig-palindrome">
            <caption>A Deque</caption>
            <image source="LinearBasic/palindromesetup.png" width="50%">
                <description><p>
                    The image depicts adding the word &quot;radar&quot; to a dequeue. Each character is added to
                    the rear of the queue during initialization, when all the characters have been added
                    character afters are removed from each end of the queue: R is removed from the rear
                    and another R is removed from the head of the queue.
                </p></description>
            </image>
        </figure>
        <p>Since we can remove both of them directly, we can compare them and
            continue only if they match. If we can keep matching first and the last
            items, we will eventually either run out of characters or be left with a
            deque of size 1 depending on whether the length of the original string
            was even or odd. In either case, the string must be a palindrome. The
            complete function for palindrome-checking appears in
            <xref ref="linear-basic_palinedrome-cpp"/>.</p>
        
            <exploration xml:id="expl-linear-basic_palinedrome">
                <title>Basic Palindrome Checker</title>
                <task xml:id="linear-basic_palinedrome-cpp" label="linear-basic_palinedrome-cpp">
                    <title>C++ Implementation</title>
                    <statement><program xml:id="palinedrome_cpp" interactive="activecode" language="cpp" label="palinedrome_cpp-prog"><code>
//program that detects palindromes.

#include &lt;deque&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

using namespace std;

bool palchecker(string aString) {
    deque&lt;char&gt; chardeque;
    int strLen = aString.length();
    for (int i = 0; i &lt; strLen; i++) {
        //pushes each char in the string to the deque.
        chardeque.push_back(aString[i]);
    }

    bool stillEqual = true;

    while (chardeque.size() &gt; 1 &amp;&amp; stillEqual) {
        char first = chardeque.front();
        chardeque.pop_front();
        char last = chardeque.back();
        chardeque.pop_back();
        if (first != last) { //if the two opposite positions of the
                             //word is not the same, then it is not
                             //a palindrome.
            stillEqual = false;
        }
    }
    return stillEqual;
}

int main() {
    cout &lt;&lt; palchecker(&quot;lsdkjfskf&quot;) &lt;&lt; endl;
    cout &lt;&lt; palchecker(&quot;radar&quot;) &lt;&lt; endl;
}

                    </code></program></statement>
                </task>
                <task xml:id="linear-basic_palinedrome-py" label="linear-basic_palinedrome-py">
                    <title>Python Implementation</title>
                    <statement><program xml:id="palchecker" interactive="activecode" language="python" label="palchecker-prog"><code>
#Program that detects palindromes.

from pythonds.basic.deque import Deque

def palchecker(aString):
    chardeque = Deque()

    for ch in aString:
        #pushes each char in the string to the deque.
        chardeque.addRear(ch)

    stillEqual = True

    while chardeque.size() &gt; 1 and stillEqual:
        first = chardeque.removeFront()
        last = chardeque.removeRear()
        if first != last: #if the two opposite positions of the
                          #word is not the same, then it is not
                          #a palindrome.
            stillEqual = False

    return stillEqual

def main():
    print(palchecker(&quot;lsdkjfskf&quot;))
    print(palchecker(&quot;radar&quot;))
main()
                    </code></program></statement>
                </task>
            </exploration>

        <p>Below we can see an upgraded code for checking palindromes, which
            is able to handle strings with capital letters, spaces, and special
            characters.</p>
        <p><xref ref="advanced-linear-basic_palinedrome-cpp"/>.</p>
        
        <listing xml:id="advanced-linear-basic_palinedrome-cpp">
            <title>Advanced Palindrome Checker</title>
            <program xml:id="advanced_palinedrome_cpp" interactive="activecode" language="cpp" label="advanced_palinedrome_cpp-prog"><code>
//program that detects palindromes.

/*
The Advanced Palindrome Checker
By: David Reynoso and David Andrejsin
*/

using namespace std;
#include &lt;deque&gt;
#include &lt;fstream&gt; // for file handling
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &quot;stdlib.h&quot; // for the system command
#include &lt;algorithm&gt; // provides an algorithm for easier removal of characters from a string

string processor(string aString) {
    // goes through string and finds uppercase letters and converts
    // them to lower case, also finds special characters and gets rid of them
    // ultimately, prepares a string for a correct palindrome evaluation
    int strLen = aString.length();
    string str = &quot;&quot;;
    for (int i = 0; i &lt; strLen; i++) {
        str += tolower(aString[i]);
    }
    str.erase(remove(str.begin(), str.end(), ' '), str.end());
    str.erase(remove(str.begin(), str.end(), '.'), str.end());
    str.erase(remove(str.begin(), str.end(), '?'), str.end());
    str.erase(remove(str.begin(), str.end(), '!'), str.end());
    str.erase(remove(str.begin(), str.end(), ','), str.end());
    str.erase(remove(str.begin(), str.end(), ';'), str.end());
    str.erase(remove(str.begin(), str.end(), ':'), str.end());
    str.erase(remove(str.begin(), str.end(), '#'), str.end());
    str.erase(remove(str.begin(), str.end(), '&quot;'), str.end());
    str.erase(remove(str.begin(), str.end(), '\''), str.end());
    // we had to use a backslash to espace the function of '
    str.erase(remove(str.begin(), str.end(), '-'), str.end());
    str.erase(remove(str.begin(), str.end(), '('), str.end());
    str.erase(remove(str.begin(), str.end(), ')'), str.end());

    return str;
}

bool palchecker(string aString) {
    // an algorithm that checks whether a string is a palindrome
    aString = processor(aString); // calls a function that prepares the string for a proper evaluation of the palindrome

    deque&lt;char&gt; chardeque;
    int strLen = aString.length();
    for (int i = 0; i &lt; strLen; i++) {
    //pushes each char in the string to the deque.
        chardeque.push_back(aString[i]);
    }

    bool stillEqual = true;

    while (chardeque.size() &gt; 1 &amp;&amp; stillEqual) {
        char first = chardeque.front();
        chardeque.pop_front();
        char last = chardeque.back();
        chardeque.pop_back();
        if (first != last) { //if the two opposite positions of the
             //word is not the same, then it is not
             //a palindrome.
            stillEqual = false;
        }
    }
    return stillEqual;
}

int main() {
    cout &lt;&lt; palchecker(&quot;Radar&quot;) &lt;&lt; endl;
    cout &lt;&lt; palchecker(&quot;Are we not pure? 'No sir!' Panama's moody Noriega brags. 'It is garbage!' Irony dooms a man; a prisoner up to new era.&quot;) &lt;&lt; endl;
    cout &lt;&lt; palchecker(&quot;Barge in! Relate mere war of 1991 for a were-metal Ernie grab!&quot;) &lt;&lt; endl;
    cout &lt;&lt; palchecker(&quot;not a palindrome&quot;) &lt;&lt; endl;
}
            </code></program>
        </listing>

<reading-questions xml:id="rqs-">
    <title>
        Reading Questions
    </title>
    
    
<exercise label="orderingPrinciples">
    <statement><p>Drag each data structure to its corresponding ordering principle</p></statement>
    <feedback><p>This is feedback.</p></feedback>
    <cardsort>
        <match>
            <premise order="1">Stack</premise>
            <response>last-in first-out</response>
        </match>
        <match>
            <premise order="2">Deque</premise>
            <response>mixed depending upon input order</response>
        </match>
        <match>
            <premise order="3">Queue</premise>
            <response>first-in first-out</response>
        </match>
    </cardsort>
</exercise>

<exercise label="Remembertypes">
    <statement><p>Click on the cause of a syntax error in the following code.</p></statement>
<feedback><p>Remember how we declare variables</p></feedback>
<areas>
<cline><area correct="yes">deque&lt;int&gt; d;</area>:</cline>
<cline><area>d.push_back(&quot;Zebra&quot;);</area>:</cline>
<cline><area>d.push_front(&quot;Turtle&quot;);</area>:</cline>
<cline><area>d.push_front(&quot;Panda&quot;);</area>:</cline>
<cline><area>d.push_back(&quot;Catfish&quot;);</area>:</cline>
<cline><area>d.push_back(&quot;Giraffe&quot;);</area>:</cline>
</areas></exercise>

    <exercise label="structureefficiency">
        <statement>

        <p>If you add five items to your code in this order <q>potato</q>, <q>rutabaga</q>, <q>avocado</q>, <q>squash</q>, <q>eggplant</q> which structure would take the least steps to retrieve <q>rutabaga</q>?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>Deque</p>
                </statement>
                <feedback>
                    <p>Yes, but it is not the only option.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Stack</p>
                </statement>
                <feedback>
                    <p>No, a stack would pop from the top, thus having more entries in the way before it gets to rutabega.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Queue</p>
                </statement>
                <feedback>
                    <p>Yes, but it is not the only option.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Both B &amp; C</p>
                </statement>
                <feedback>
                    <p>One of these two would be correct, but the other would not.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>Both A &amp; C</p>
                </statement>
                <feedback>
                    <p>Correct!</p>
                </feedback>
            </choice>
</choices>

    </exercise>
</reading-questions>
<p>
    <!-- extra space before the progress bar -->        
</p>
    </section>
