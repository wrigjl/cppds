<?xml version="1.0" ?><section xml:id="linear-basic_balanced-symbols-a-general-case">
        <title>Balanced Symbols - A General Case</title>
        <p>The balanced parentheses problem shown above is a specific case of a
            more general situation that arises in many programming languages. The
            general problem of balancing and nesting different kinds of opening and
            closing symbols occurs frequently. For example, in Python
            square brackets, <c>[</c> and <c>]</c>, are used for lists; curly brackets, <c>{</c> and <c>}</c>, are
            used for dictionaries; and parenthesis, <c>(</c> and <c>)</c>, are used for tuples and
            arithmetic expressions. In C++, square brackets, <c>[</c> and <c>]</c>, are used for arrays and vectors,
            brackets <c>{</c> and <c>}</c> separate possibly nested blocks of code,
            and operations are given inside of possibly nested parentheses <c>(</c> and <c>)</c>.
            It is possible to mix symbols as long as each
            maintains its own open and close relationship. Strings of symbols such
            as</p>
        <pre>{ { ( [ ] [ ] ) } ( ) }

[ [ { { ( ( ) ) } } ] ]

[ ] [ ] [ ] ( ) { }</pre>
        <p>are properly balanced in that not only does each opening symbol have a
            corresponding closing symbol, but the types of symbols match as well.</p>
        <p>Compare those with the following strings that are not balanced:</p>
        <pre>( [ ) ]

( ( ( ) ] ) )

[ { ( ) ]</pre>
        <p>The simple parentheses checker from the previous section can easily be
            extended to handle these new types of symbols. Recall that each opening
            symbol is simply pushed on the stack to wait for the matching closing
            symbol to appear later in the sequence. When a closing symbol does
            appear, the only difference is that we must check to be sure that it
            correctly matches the type of the opening symbol on top of the stack. If
            the two symbols do not match, the string is not balanced. Once again, if
            the entire string is processed and nothing is left on the stack, the
            string is correctly balanced.</p>
        <p>Implementations of this are shown in <xref ref="lst-parcheck2-cpp"/>.
            The key C++ feature appears in line 38 where we call a helper function, <c>matches</c>, to
            assist with symbol-matching. Each symbol that is removed from the stack
            must be checked to see that it matches the current closing symbol. If a
            mismatch occurs, the Boolean variable <c>balanced</c> is set to <c>false</c>.</p>
        
        <exploration xml:id="expl-lst-parcheck2">
            <title>Generalized Balance Symbol Checking</title>
            <task xml:id="lst-parcheck2-cpp" label="lst-parcheck2-cpp">
                <title>C++ Implementation</title>
                <statement><program xml:id="parcheck2_cpp" interactive="activecode" language="cpp" line-numbers="yes" label="parcheck2_cpp-prog"><code>
//program that returns whether a string is balanced or not
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;stack&gt;

using namespace std;

//returns true of symbol is in symbols
bool inString(string symbol, string symbols){
    return symbols.find(symbol) != string::npos;
}

//returns true if the symbol in &quot;open&quot;
//matches the symbol in &quot;close&quot;
bool matches(string open, string close){
    string opens = &quot;({[&quot;;
    string closers = &quot;)]}&quot;;
    bool val = inString(open, opens) == inString(close, closers);
    return val;
}

// Go through the string pushing opening symbols
// and popping/matching when a closing symbol is
// encountered
bool parChecker(string symbolString){
    stack&lt;string&gt; s;
    bool balanced = true;
    int index = 0;
    int symbolLength = symbolString.length();

    while(index &lt; symbolLength &amp;&amp; balanced){
        string symbol;
        symbol = symbolString[index];
        string opens = &quot;([{&quot;;
        string closes = &quot;}])&quot;;
        if (inString(symbol, opens)){
            s.push(symbol);
        } else if(inString(symbol, closes)){
            if (s.empty()){
                balanced = false;
            } else {
                string top = s.top();
                s.pop();
                if (!matches(top, symbol)){
                    balanced = false;
                    break;
                }
            }
        }
        index = index + 1;
    }
    if(balanced &amp;&amp; s.empty()){
        return true;
    } else {
        return false;
    }
}

int main() {
    cout &lt;&lt; parChecker(&quot;{}&quot;) &lt;&lt; endl;
    cout &lt;&lt; parChecker(&quot;[{()}]&quot;) &lt;&lt; endl;
    return 0;
}
                </code></program></statement>
            </task>
            <task xml:id="lst-parcheck2-py" label="lst-parcheck2-py">
                <title>Python Implementation</title>
                <statement><program xml:id="parcheck2_py" interactive="activecode" language="python" label="parcheck2_py-prog"><code>
#Program does the same as before, except with 2 extra symbols.

from pythonds.basic.stack import Stack

def parChecker(symbolString):
    s = Stack()
    balanced = True
    index = 0
    while index &lt; len(symbolString) and balanced:
        symbol = symbolString[index]
        if symbol in &quot;([{&quot;: #if the current symbol ==
                            #an open symbol.
            s.push(symbol)
        else:
            if s.isEmpty(): #if there is a closed symbol
                            #but no open symbol is pending.
                balanced = False
            else:
                top = s.pop()
                if not matches(top,symbol): #if the current closed symbol
                                            #is a different type than the
                                            #pending open one.
                       balanced = False
        index = index + 1
    if balanced and s.isEmpty(): #if the string is completely analyzed with
                                 #no remaining open symbols.
        return True
    else:
        return False

def matches(open,close):
    #Checks if the type of an open and closed symbol are the same.
    opens = &quot;([{&quot;
    closers = &quot;)]}&quot;
    return opens.index(open) == closers.index(close)

def main():
    print(parChecker('{[([][])]()}'))
    print(parChecker('[{()]'))
main()
                </code></program></statement>
            </task>
        </exploration>
        <p>These two examples show that stacks are very important data structures
            for the processing of language constructs in computer science. Almost
            any notation you can think of has some type of nested symbols that must
            be matched in a balanced order. A number of other important
            uses for stacks exist in computer science. We will continue to explore them
            in the next sections.</p>
<reading-questions xml:id="rq-balanced-sybols">
  <title>
    <p>Reading Question</p>
  </title>
  <exercise label="stackclick">
    <statement><p>Using the program below, click on the line of code that adds an open parenthesis to the stack.</p></statement>
    <feedback><p>Remember that the function to do this would be the push function.</p></feedback>
    <areas>
      <cline><area correct="no">bool parChecker(string symbolString){</area>:</cline>
      <cline>      <area correct="no">stack&lt;string&gt; s;</area>:</cline>
      <cline>      <area correct="no">bool balanced = true;</area>:</cline>
      <cline>      <area correct="no">int index = 0;</area>:</cline>
      <cline>      <area correct="no">int symbolLength = symbolString.length();</area>:</cline>
      <cline/>
      <cline>      <area correct="no">while(index &lt; symbolLength &amp;&amp; balanced){</area>:</cline>
      <cline>          <area correct="no">string symbol;</area>:</cline>
      <cline>          <area correct="no">symbol = symbolString[index];</area>:</cline>
      <cline>          <area correct="no">string opens = &quot;({[&quot;;</area>:</cline>
      <cline>          <area correct="no">if (inString(symbol, opens)){</area>:</cline>
      <cline>              <area correct="yes">s.push(symbol);</area>:</cline> <!-- Correct line -->
      <cline>          } else {</cline>
      <cline>              <area correct="no">if (s.empty()){</area>:</cline>
      <cline>                  <area correct="no">balanced = false;</area>:</cline>
      <cline>              } else {</cline>
      <cline>                  <area correct="no">string top = s.top();</area>:</cline>
      <cline>                  <area correct="no">s.pop();</area>:</cline>
      <cline>                  <area correct="no">if (!matches(top, symbol)){</area>:</cline>
      <cline>                      <area correct="no">balanced = false;</area>:</cline>
      <cline>                  }</cline>
      <cline>              }</cline>
      <cline>          }</cline>
      <cline>          <area correct="no">index = index + 1;</area>:</cline>
      <cline>      }</cline>
      <cline>      <area correct="no">if(balanced &amp;&amp; s.empty()){</area>:</cline>
      <cline>          <area correct="no">return true;</area>:</cline>
      <cline>      } else {</cline>
      <cline>          <area correct="no">return false;</area>:</cline>
      <cline>      }</cline>
      <cline>  <area correct="no">}</area></cline>
    </areas>
  </exercise>
</reading-questions>

            <p>
                <!-- extra space before the progress bar -->
            </p>
    </section>
