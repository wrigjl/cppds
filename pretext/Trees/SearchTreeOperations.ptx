<section xml:id="trees_search-tree-operations">
        <title>Search Tree Operations</title>
        <p>Before we look at the implementation, let's discuss the operations that
            will be provided by the <c>BinarySearchTree</c>. You should notice that
            this interface is very
            similar to the C++ Hash Table in <xref ref="search-hash_hashing"/>.
            While the operations provided by <c>BinarySearchTree</c> are the same
            as the Hash Table, we will see that how items are stored and accessed
            is very different.</p>
        <p><ul>
            <li>
                <p><c>BinarySearchTree()</c> Create a new, empty tree.</p>
            </li>
            <li>
                <p><c>put(key,val)</c> Add a new key-value pair to the tree. If the key is
                    already in the tree then replace the old value with the new value.</p>
            </li>
            <li>
                <p><c>get(key)</c> Given a key, return the value stored in the tree
                    or throw an exception.</p>
            </li>
            <li>
                <p><c>del(key)</c> Delete the key-value pair from the tree.</p>
            </li>
            <li>
                <p><c>length()</c> Return the number of key-value pairs stored in the tree.</p>
            </li>
        </ul></p>
    </section>

