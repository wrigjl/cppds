<section xml:id="trees_avl-tree-performance">
        <title>AVL Tree Performance</title>
        <p>Before we proceed any further let's look at the result of enforcing this
            new balance factor requirement. Our claim is that by ensuring that a
            tree always has a balance factor of -1, 0, or 1 we can get better Big-O
            performance of key operations. Let us start by thinking about how this
            balance condition changes the worst-case tree. The worse case performance
            for binary search trees is <m>O(n)</m> because the worst case "tree"
            equivalent to a singly linked list (see <xref ref="trees_search-tree-analysis"/>).</p>
        <p>What is the worst case tree which also preserves a balance factor of -1, 0 or 1?
            Another way of asking that question is: how tall of a tree can we create for a given
            number of nodes that also preserves the balanace factor requirements? To answer this,
            we depict the minimum number of nodes to construct trees of height 0, 1, 2, and 3
            in <xref ref="fig-worstavl"/>. In the diagram, the most left-heavy tree possible is
            constructed for each height. We could have chosen to create the most right-heavy tree
            without loss of generalization.</p>

        <figure xml:id="fig-worstavl">
          <caption>Worst-Case Left-Heavy AVL Trees.</caption>
          <image source="Trees/worstAVL.svg"> 
            <description>
            <p>
                Image showing the most unbalanced left-heavy AVL trees for heights 0, 1, 2, and 3, adhering to the AVL balance factor rules. 
                Each tree is labeled with nodes and balance factors:
                - For height 0, the tree contains a single node "A" with a balance factor of 0.
                - For height 1, the tree has "B" as the root with a balance factor of 1 and "A" as its left child with a balance factor of 0.
                - For height 2, the tree has "C" as the root with a balance factor of 1. "B" is the left child of "C" with a balance factor of 1, 
                and "A" is the left child of "B" with a balance factor of 0. "D" is the right child of "C" with a balance factor of 0.
                - For height 3, the tree has "E" as the root with a balance factor of 1. "C" is the left child of "E" with a balance factor of 1. 
                "B" is the left child of "C" with a balance factor of 1, and "A" is the left child of "B" with a balance factor of 0. "D" is the 
                right child of "C" with a balance factor of 0. "G" is the right child of "E" with a balance factor of 1, and "F" is the left 
                child of "G" with a balance factor of 0.
                This sequence demonstrates the maximum permissible left-heavy configurations in AVL trees while maintaining balance factors 
                of -1, 0, or 1 at all nodes.
            </p>
            </description>

          </image>
        </figure>
        <p>Going from left to right in <xref ref="fig-worstavl"/>, the tree is constructed by adding a new root node
        (depicted in green). Then the previous tree (show in red) is added as its left subtree. Finally, tree before
        that (depicted in blue) is added as the root's right subtree.</p>
        
        <p>Looking at the total number of nodes in the tree we see that for a tree
            of height 0 there is 1 node, for a tree of height 1 there is <m>1+1
                = 2</m> nodes, for a tree of height 2 there are <m>1+1+2 = 4</m> and
            for a tree of height 3 there are <m>1 + 2 + 4 = 7</m>. More generally
            the pattern we see for the number of nodes in a tree of height h
            (<m>N_h</m>) is:
        <me>N_h = 1 + N_{h-1} + N_{h-2}</me>.</p>
        <p>This recurrence may look familiar to you because it is very similar to
            the Fibonacci sequence. We can use this fact to derive a formula for the
            height of an AVL tree given the number of nodes in the tree. Recall that
            for the Fibonacci sequence the <m>i_{th}</m> Fibonacci number is
            given by:
        <me>\begin{split}
            F_0 &amp;= 0 \\
            F_1 &amp;= 1 \\
              &amp;\vdots \\
            F_i &amp;= F_{i-1} + F_{i-2}  \text{ for all } i \ge 2
            \end{split}
        </me>.</p>
        <p>We can express the value of the number of nodes in a tree of height <m>h</m>
            in terms of its position in the Fibonacci sequence:
        <me>N_h = F_{h+3} - 1, h \ge 0</me>.</p>
        
        <p>An important mathematical result is that the <m>i^{th}</m> Fibonacci number
            can be found using Binet's formula:
        <me>F_i = \frac{\Phi^i - (1 - \Phi)^i}{\sqrt{5}}</me>.</p>

        <p>You can consult a math text if you want to see a derivation of the
        previous formula. <m>\Phi</m> is the golden ratio and as is defined as:
        <me>\Phi = \frac{1 + \sqrt{5}}{2} \approx 1.618</me>.</p>

        <p>In Binet's formula, as <m>i</m> grows large, the term <m>(1 - \Phi)^i</m>
            approaches zero, so we can use the following approximation to obtain a
            value close to the <m>i^{th}</m> Fibonacci number:
        <me>F_i \approx \frac{\Phi^i}{\sqrt{5}}</me>.</p>

        <p>By replacing the Fibonacci reference with its golden ratio approximation
            we get:
        <me>N_h = \frac{\Phi^{h+3}}{\sqrt{5}} - 1</me>.</p>
        <p>If we rearrange the terms, and take the base 2 log of both sides and
            then solve for <m>h</m> we get the following derivation:
        <me>\begin{split}
            \log_2{(N_h + 1)} &amp;= (h+3)\log_2{\Phi} - \frac{1}{2} \log_2{5} \\
            h &amp;= \frac{\log_2{(N_h + 1)} - 3 \log_2{\Phi} + \frac{1}{2} \log_2{5}}{\log_2{\Phi}} \\
            h &amp;\approx 1.44 \log_2{(N_h + 1) - 2.57}
            \end{split}
        </me>.</p>
        <p>This derivation shows us that at any time the height of our AVL tree is
            equal to a constant(1.44) times the log of the number of nodes in the tree. This
            is great news for searching our AVL tree because it limits the search to
            <m>O(\log{N})</m>.</p>
    </section>
