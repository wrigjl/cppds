<section xml:id="trees_balanced-binary-search-trees">
        <title>Balanced Binary Search Trees</title>
        <p><idx>AVL tree</idx> The previous section we looked at building a binary search tree. As
            we learned, the performance of the binary search tree can degrade to
            <m>O(n)</m> for operations like <c>get</c> and <c>put</c> when the tree
            becomes unbalanced. In this section we will look at a special kind of
            binary search tree that automatically makes sure that the tree remains
            balanced at all times. This tree is called an <term>AVL tree</term> and is named
            for its inventors: G.M. Adelson-Velskii and E.M. Landis.</p>
        <p><idx>balance factor</idx>An AVL tree implements the Map abstract data type just like a regular
            binary search tree, the only difference is in how the tree performs. To
            implement our AVL tree we need to keep track of a <term>balance factor</term> for
            each node in the tree. We do this by looking at the heights of the left
            and right subtrees for each node. More formally, we define the balance
            factor for a node as the difference between the height of the left
            subtree and the height of the right subtree.
        <me>balanceFactor = height(leftSubTree) - height(rightSubTree)</me></p>
        <p>Using the definition for balance factor given above we say that a
            subtree is left-heavy if the balance factor is greater than zero. If the
            balance factor is less than zero then the subtree is right heavy. If the
            balance factor is zero then the tree is perfectly in balance. For
            purposes of implementing an AVL tree, and gaining the benefit of having
            a balanced tree we will define a tree to be in balance if the balance
            factor is -1, 0, or 1. Once the balance factor of a node in a tree is
            outside this range we will need to have a procedure to bring the tree
            back into balance. <xref ref="fig-unbal"/> shows an example of an unbalanced,
            right-heavy tree and the balance factors of each node.</p>
        
        <figure xml:id="fig-unbal">
            <caption>An Unbalanced Right-Heavy Tree with Balance Factors.</caption>
        <image source="Trees/unbalanced.png" width="50%">
        <description>
            <p>
                A diagram of an unbalanced binary search tree, showing nodes with their corresponding balance factors. The tree structure begins at the root node 
                with a balance factor of "-2," indicating that the tree is right-heavy. The left child of the root has a balance factor of "0," while the right child 
                has a balance factor of "-1." The right child further branches into two nodes: one with a balance factor of "0" and another with "-1." 
                At the far right, the last node in the tree has a balance factor of "0." The diagram visually illustrates the imbalance in the tree caused 
                by the concentration of nodes in the right subtree.
            </p>
        </description>

        </image>
        </figure>
    </section>

