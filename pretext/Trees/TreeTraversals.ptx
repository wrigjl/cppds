<?xml version="1.0" ?><section xml:id="trees_tree-traversals">
        <title>Tree Traversals</title>
        <p>Now that we have examined the basic functionality of our
            tree data structure, it is time to look at some additional usage
            patterns for trees. These usage patterns can be divided into the three
            ways that we access the nodes of the tree. There are three commonly used
            patterns to visit all the nodes in a tree. The difference between these
            patterns is the order in which each node is visited. We call this
            visitation of the nodes a <q>traversal.</q> The three traversals we will look
            at are called <term>preorder</term>, <term>inorder</term>, and <term>postorder</term>. Let's start
            out by defining these three traversals more carefully, then look at some
            examples where these patterns are useful.</p>
        

        <figure xml:id="fig-trav-tree">
            <caption>Example tree to be traversed.</caption>
                <image source="Trees/trav_tree.png" width="50%">
                <description><p>Illustration of a binary tree. The top node is labeled '1', and it splits into two child nodes labeled '3' on the left and '8' on the right. The '3' node further splits into two child nodes labeled '7' on the left and '5' on the right. The '8' node also splits into two children, with '2' on the left and '9' on the right. The nodes are connected by lines indicating the tree structure.</p></description>
                </image>
            </figure>

        <p><dl>
            <li>
                <title>preorder</title>
                
                    <p>In a preorder traversal, we visit the root node first, then
                        recursively do a preorder traversal of the left subtree, followed by
                        a recursive preorder traversal of the right subtree.</p>
                
            </li>
        </dl></p>
        
        <figure xml:id="fig-pre-order-tree">
            <caption>Traversal pattern for preorder.</caption>
                <image source="Trees/pre_order.gif" width="50%">
                <description><p>Diagram of a binary tree to illustrate the preorder traversal pattern. The tree consists of a root node labeled '1', with a left child labeled '3', which in turn has two children labeled '7' and '5'. The root node also has a right child labeled '8', which has two children labeled '2' and '9'. The nodes '1', '3', '7', '5', '8', and '9' are circled, indicating the order of the preorder traversal. Arrows point from the root node '1' to the left child '3', then to '7', back up through '3' to '5', then to the right child '8', and finally to '9', following the preorder traversal pattern. The image is labeled 'Figure 6: Traversal pattern for preorder'.</p></description>
                </image>
            </figure>


        <p><dl>
            <li>
                <title>inorder</title>
                
                    <p>In an inorder traversal, we recursively do an inorder traversal on
                        the left subtree, visit the root node, and finally do a recursive
                        inorder traversal of the right subtree.</p>
                
            </li>
        </dl></p>
        

        <figure xml:id="fig-in-order-tree">
            <caption>Traversal pattern for inorder.</caption>
                <image source="Trees/in_order.gif" width="50%">
                <description><p>Diagram of a binary tree to illustrate the inorder traversal pattern. The tree has a root node at the top labeled '1', which branches out to a left child labeled '3' and a right child labeled '8'. The '3' node has further children labeled '7' and '5', and the '8' node has children labeled '2' and '9'. The nodes are not circled, but the traversal pattern is indicated by a black arrow starting from the '3' node, moving to its left child '7', then up to '3', across to '5', up to '1', then to '8', down to '2', and finally to '9' on the far right. This pattern represents the inorder traversal where you visit the left subtree, the node itself, and then the right subtree.</p></description>
                </image>
            </figure>

        <p><dl>
            <li>
                <title>postorder</title>
                
                    <p>In a postorder traversal, we recursively do a postorder traversal of
                        the left subtree and the right subtree followed by a visit to the
                        root node.</p>
                
            </li>
        </dl></p>
        

        <figure xml:id="fig-post-order-tree">
            <caption>Traversal pattern for postorder.</caption>
                <image source="Trees/post_order.gif" width="50%">
                <description><p>Diagram of a binary tree to illustrate the postorder traversal pattern. The tree structure includes a root node labeled '1' at the top, with a left child labeled '3' and a right child labeled '8'. Node '3' has two children labeled '7' and '5', while node '8' has children labeled '2' and '9'. The traversal pattern is shown with black arrows starting at the leftmost child '7', moving up to '3', across to '5', back to '3', then to the root '1', over to the right child '8', down to '2', and finally to '9'. In postorder traversal, the nodes are visited from the bottom-up, starting with the left subtree, then the right subtree, and ending with the root node.</p></description>
                </image>
            </figure>


        <p>Let's look at some examples that illustrate each of these three kinds of
            traversals. First let's look at the preorder traversal. As an example of
            a tree to traverse, we will represent this book as a tree. The book is
            the root of the tree, and each chapter is a child of the root. Each
            section within a chapter is a child of the chapter, and each subsection
            is a child of its section, and so on. <xref ref="fig-booktree"/> shows a
            limited version of a book with only two chapters. Note that the
            traversal algorithm works for trees with any number of children, but we
            will stick with binary trees for now.</p>
 
        <figure xml:id="fig-booktree">
            <caption>Representing a Book as a Tree.</caption>
                <image source="Trees/booktree.png" width="50%">
                <description><p>Diagram of a hierarchical tree representing the structure of a book. The root node at the top is labeled 'Book', which branches out to two child nodes labeled 'Chapter1' and 'Chapter2'. Each chapter node further divides into sections: 'Chapter1' into 'Section 1.1' and 'Section 1.2', while 'Chapter2' splits into 'Section 2.1' and 'Section 2.2'. Each section node also branches into subsections, with 'Section 1.1' leading to 'Section 1.2.1' and 'Section 1.2.2', and 'Section 2.2' leading to 'Section 2.2.1' and 'Section 2.2.2'. The nodes are connected by lines that represent the tree structure, demonstrating the organizational hierarchy of the book's contents.</p></description>
                </image>
            </figure>


        <p>Suppose that you wanted to read this book from front to back. The
            preorder traversal gives you exactly that ordering. Starting at the root
            of the tree (the Book node) we will follow the preorder traversal
            instructions. We recursively call <c>preorder</c> on the left child, in
            this case Chapter<nbsp/>1. We again recursively call <c>preorder</c> on the left
            child to get to Section<nbsp/>1.1. Since Section<nbsp/>1.1 has no children, we do
            not make any additional recursive calls. When we are finished with
            Section<nbsp/>1.1, we move up the tree to Chapter<nbsp/>1. At this point we still
            need to visit the right subtree of Chapter<nbsp/>1, which is Section<nbsp/>1.2. As
            before we visit the left subtree, which brings us to Section<nbsp/>1.2.1, then
            we visit the node for Section<nbsp/>1.2.2. With Section<nbsp/>1.2 finished, we
            return to Chapter<nbsp/>1. Then we return to the Book node and follow the same
            procedure for Chapter<nbsp/>2.</p>
        <p>The code for writing tree traversals is surprisingly elegant, largely
            because the traversals are written recursively. <xref ref="lst-preorder1-cpp"/>
            shows the C++ code for a preorder traversal of a binary tree.</p>
        <p>You may wonder, what is the best way to write an algorithm like preorder
            traversal? Should it be a function that simply uses a tree as a data
            structure, or should it be a method of the tree data structure itself?
            <xref ref="lst-preorder1-cpp"/> shows a version of the preorder traversal
            written as an external function that takes a binary tree as a parameter.
            The external function is particularly elegant because our base case is
            simply to check if the tree exists. If the tree parameter is <c>None</c>,
            then the function returns without taking any action.</p>
        
        <exploration xml:id="expl-preorder1">
            <title>Preorder Traversal</title>
            <task xml:id="lst-preorder1-cpp" label="lst-preorder1-cpp">
                <title>C++ Implementation</title>
                <statement><program language="cpp" label="lst-preorder1-cpp-prog"><code>
void preorder(BinaryTree *tree){
    if (tree){
        cout &lt;&lt; tree-&gt;getRootVal() &lt;&lt; endl;
        preorder(tree-&gt;getLeftChild());
        preorder(tree-&gt;getRightChild());
    }
}
                </code></program></statement>
            </task>
            <task xml:id="lst-preorder1-py" label="lst-preorder1-py">
                <title>Python Implementation</title>
                <statement><program language="python" label="lst-preorder1-py-prog"><code>
def preorder(tree):
    if tree:
        print(tree.getRootVal())
        preorder(tree.getLeftChild())
        preorder(tree.getRightChild())
                </code></program></statement>
            </task>
        </exploration>
        <p>We can also implement <c>preorder</c> as a method of the <c>BinaryTree</c>
            class. The code for implementing <c>preorder</c> as an internal method is
            shown in <xref ref="lst-preorder2-cpp"/>. Notice what happens when we move the
            code from external to internal. In general, we just replace <c>tree</c>
            with <c>self</c>. However, we also need to modify the base case. The
            internal method must check for the existence of the left and the right
            children <em>before</em> making the recursive call to <c>preorder</c>.</p>

        <exploration xml:id="expl-preorder2">
            <title>Preorder Traversal as a Method</title>
            <task xml:id="lst-preorder2-cpp" label="lst-preorder2-cpp">
                <title>C++ Implementation</title>
                <statement><program language="cpp" label="lst-preorder2-cpp-prog"><code>
void preorder(){
    cout &lt;&lt; this-&gt;key &lt;&lt; endl;
    if (this-&gt;leftChild){
        this-&gt;leftChild-&gt;preorder();
    }
    if (this-&gt;rightChild){
        this-&gt;rightChild-&gt;preorder();
    }
}
                </code></program></statement>
            </task>
            <task xml:id="lst-preorder2-py" label="lst-preorder2-py">
                <title>Python Implementation</title>
                <statement><program language="python" label="lst-preorder2-py-prog"><code>
def preorder(self):
    print(self.key)
    if self.leftChild:
        self.leftChild.preorder()
    if self.rightChild:
        self.rightChild.preorder()
                </code></program></statement>
            </task>
        </exploration>
        <p>Which of these two ways to implement <c>preorder</c> is best? The answer is
            that implementing <c>preorder</c> as an external function is probably
            better in this case. The reason is that you very rarely want to just
            traverse the tree. In most cases you are going to want to accomplish
            something else while using one of the basic traversal patterns. In fact,
            we will see in the next example that the <c>postorder</c> traversal pattern
            follows very closely with the code we wrote earlier to evaluate a parse
            tree. Therefore we will write the rest of the traversals as external
            functions.</p>
        <p>The algorithm for the <c>postorder</c> traversal, shown in
            <xref ref="lst-postorder1-cpp"/>, is nearly identical to <c>preorder</c> except that
            we move the call to print to the end of the function.</p>
        
        <exploration xml:id="expl-postorder1">
            <title>Postorder Traversal</title>
            <task xml:id="lst-postorder1-cpp" label="lst-postorder1-cpp">
                <title>C++ Implementation</title>
                <statement><program language="cpp" label="lst-postorder1-cpp-prog"><code>
void postorder(BinaryTree *tree){
    if (tree != nullptr){
        postorder(tree-&gt;getLeftChild());
        postorder(tree-&gt;getRightChild());
        cout &lt;&lt; tree-&gt;getRootVal() &lt;&lt; endl;
    }
}
                </code></program></statement>
            </task>
            <task xml:id="lst-postorder1-py" label="lst-postorder1-py">
                <title>Python Implementation</title>
                <statement><program language="python" label="lst-postorder1-py-prog"><code>
def postorder(tree):
    if tree != None:
        postorder(tree.getLeftChild())
        postorder(tree.getRightChild())
        print(tree.getRootVal())
                </code></program></statement>
            </task>
        </exploration>
        <p>We have already seen a common use for the postorder traversal, namely
            evaluating a parse tree. Look back at <xref ref="trees_parse-tree"/> again. What
            we are doing is evaluating the left subtree, evaluating the right
            subtree, and combining them in the root through the function call to an
            operator. Assume that our binary tree is going to store only expression
            tree data. Let's rewrite the evaluation function, but model it even more
            closely on the <c>postorder</c> code in <xref ref="lst-postorder1-cpp"/> (see <xref ref="lst-postordereval-cpp"/>).</p>
            
        <exploration xml:id="expl-postordereval">
            <title>Postorder Evaluation</title>
            <task xml:id="lst-postordereval-cpp" label="lst-postordereval-cpp">
                <title>C++ Implementation</title>
                <statement><program language="cpp" label="lst-postordereval-cpp-prog"><code>
class Operator {
    public:
        int add(int x, int y){
            return x + y;
        }

        int sub(int x, int y){
            return x - y;
        }

        int mul(int x, int y){
            return x * y;
        }

        int div(int x, int y){
            return x / y;
        }
};

int to_int(string str) {
    stringstream convert(str);
    int x = 0;
    convert &gt;&gt; x;
    return x;
}

string to_string(int num) {
    string str;
    ostringstream convert;
    convert &lt;&lt; num;
    str = convert.str();
    return str;
}

string evaluate(BinaryTree *parseTree) {
    Operator Oper;

    BinaryTree *leftC = parseTree-&gt;getLeftChild();
    BinaryTree *rightC = parseTree-&gt;getRightChild();

    if (leftC &amp;&amp; rightC) {
        if (parseTree-&gt;getRootVal() == &quot;+&quot;) {
            return to_string(Oper.add(to_int(evaluate(leftC)), to_int(evaluate(rightC))));
        } else if (parseTree-&gt;getRootVal() == &quot;-&quot;) {
            return to_string(Oper.sub(to_int(evaluate(leftC)), to_int(evaluate(rightC))));
        } else if (parseTree-&gt;getRootVal() == &quot;*&quot;) {
            return to_string(Oper.mul(to_int(evaluate(leftC)), to_int(evaluate(rightC))));
        } else {
            return to_string(Oper.div(to_int(evaluate(leftC)), to_int(evaluate(rightC))));
        }
    } else {
        return parseTree-&gt;getRootVal();
    }
}

int main(){

    return 0;
}
                </code></program></statement>
            </task>
            <task xml:id="lst-postordereval-py" label="lst-postordereval-py">
                <title>Python Implementation</title>
                <statement><program language="python" label="lst-postordereval-py-prog"><code>
def postordereval(tree):
    opers = {'+':operator.add, '-':operator.sub, '*':operator.mul, '/':operator.truediv}
    res1 = None
    res2 = None
    if tree:
        res1 = postordereval(tree.getLeftChild())
        res2 = postordereval(tree.getRightChild())
        if res1 and res2:
            return opers[tree.getRootVal()](res1,res2)
        else:
            return tree.getRootVal()
                </code></program></statement>
            </task>
        </exploration>
        <p>Notice that the form in <xref ref="lst-postorder1-cpp"/> is the same as the form
            in <xref ref="lst-postordereval-cpp"/>, except that instead of printing the key at
            the end of the function, we return it. This allows us to save the values
            returned from the recursive calls in lines 6 and 7. We
            then use these saved values along with the operator on line 9.</p>
        <p>The final traversal we will look at in this section is the inorder
            traversal. In the inorder traversal we visit the left subtree, followed
            by the root, and finally the right subtree. <xref ref="lst-inorder1-cpp"/> shows
            our code for the inorder traversal. Notice that in all three of the
            traversal functions we are simply changing the position of the <c>print</c>
            statement with respect to the two recursive function calls.</p>
        
        <exploration xml:id="expl-inorder1">
            <title>Inorder Traversal</title>
            <task xml:id="lst-inorder1-cpp" label="lst-inorder1-cpp">
                <title>C++ Implementation</title>
                <statement><program language="cpp" label="lst-inorder1-cpp-prog"><code>
void inorder(BinaryTree *tree){
    if (tree != nullptr){
        inorder(tree-&gt;getLeftChild());
        cout &lt;&lt; tree-&gt;getRootVal();
        inorder(tree-&gt;getRightChild());
    }
}
                </code></program></statement>
            </task>
            <task xml:id="lst-inorder1-py" label="lst-inorder1-py">
                <title>Python Implementation</title>
                <statement><program language="python" label="lst-inorder1-py-prog"><code>
def inorder(tree):
  if tree != None:
      inorder(tree.getLeftChild())
      print(tree.getRootVal())
      inorder(tree.getRightChild())
                </code></program></statement>
            </task>
        </exploration>
        <p>If we perform a simple inorder traversal of a parse tree we get our
            original expression back, without any parentheses. Let's modify the
            basic inorder algorithm to allow us to recover the fully parenthesized
            version of the expression. The only modifications we will make to the
            basic template are as follows: print a left parenthesis <em>before</em> the
            recursive call to the left subtree, and print a right parenthesis
            <em>after</em> the recursive call to the right subtree. The modified code is
            shown in <xref ref="lst-printexp-cpp"/>.</p>
        
        <exploration xml:id="expl-printexp">
            <title>Inorder Traversal</title>
            <task xml:id="lst-printexp-cpp" label="lst-printexp-cpp">
                <title>C++ Implementation</title>
                <statement><program language="cpp" label="lst-printexp-cpp-prog"><code>
string printexp(BinaryTree *tree){
    string sVal;
    if (tree){
        sVal = &quot;(&quot; + printexp(tree-&gt;getLeftChild());
        sVal = sVal + tree-&gt;getRootVal();
        sVal = sVal + printexp(tree-&gt;getRightChild()) + &quot;)&quot;;
    }
    return sVal;
}
                </code></program></statement>
            </task>
            <task xml:id="lst-printexp-py" label="lst-printexp-py">
                <title>Python Implementation</title>
                <statement><program language="python" label="lst-printexp-py-prog"><code>
def printexp(tree):
  sVal = &quot;&quot;
  if tree:
      sVal = '(' + printexp(tree.getLeftChild())
      sVal = sVal + str(tree.getRootVal())
      sVal = sVal + printexp(tree.getRightChild())+')'
  return sVal
                </code></program></statement>
            </task>
        </exploration>
        <p>Notice that the <c>printexp</c> function as we have implemented it puts
            parentheses around each number. While not incorrect, the parentheses are
            clearly not needed. In the exercises at the end of this chapter you are
            asked to modify the <c>printexp</c> function to remove this set of parentheses.</p>
<reading-questions xml:id="rq-tree-traversal">
    <title>Reading Questions</title>
    
    

<exercise label="treeTraversalTypes">
    <statement><p>Drag the tree traversal to its corresponding pattern.</p></statement>
    <feedback><p>Review the tree traversal patterns.</p></feedback>
    <cardsort>
        <match>
            <premise order="1">preorder</premise>
            <response>root, left, right</response>
        </match>
        <match>
            <premise order="2">inorder</premise>
            <response>left, root, right</response>
        </match>
        <match>
            <premise order="3">postorder</premise>
            <response>left, right, root</response>
        </match>
    </cardsort>
</exercise>

<exercise label="question1_1">
        <statement>

        <p>If you print out the data at each node, what would be the result of using
            the preorder traversal method on <xref ref="fig-booktree"/>?</p>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>Book, Chapter<nbsp/>1, Section<nbsp/>1.1, Section<nbsp/>1.2, Section<nbsp/>1.2.2,
Section<nbsp/>1.2.2, Chapter<nbsp/>2, Section<nbsp/>2.1, Section<nbsp/>2.2, Section<nbsp/>2.2.1, Section<nbsp/>2.2.2</p>
                </statement>
                <feedback>
                    <p>correct</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Section<nbsp/>1.1, Chapter<nbsp/>1.2, Section<nbsp/>1.2.1, Section<nbsp/>1.2, Section<nbsp/>1.2.2,
Section<nbsp/>2.1, Chapter<nbsp/>2, Section<nbsp/>2.2.1, Section<nbsp/>2.2, Section<nbsp/>2.2.2</p>
                </statement>
                <feedback>
                    <p>Incorrect, this is postorder traversal</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Section<nbsp/>1.1, Section<nbsp/>1.2.1, Section<nbsp/>1.2.2, Section<nbsp/>1.2, Chapter<nbsp/>1,
Section<nbsp/>2.1, Section<nbsp/>2.2.1, Section<nbsp/>2.2.2, Section<nbsp/>2.2, Chapter<nbsp/>2, Book</p>
                </statement>
                <feedback>
                    <p>Incorrect, this is inorder traversal</p>
                </feedback>
            </choice>
</choices>

    </exercise>
</reading-questions>
    </section>
