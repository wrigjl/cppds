<?xml version="1.0" ?><section xml:id="trees_avl-tree-implementation">
        <title>AVL Tree Implementation</title>
        <p>Now that we have demonstrated that keeping an AVL tree in balance is
            going to be a big performance improvement, let us look at how we will
            augment the procedure to insert a new key into the tree. Since all new
            keys are inserted into the tree as leaf nodes and we know that the
            balance factor for a new leaf is zero, there are no new requirements for
            the node that was just inserted. But once the new leaf is added we must
            update the balance factor of its parent. How this new leaf affects the
            parent's balance factor depends on whether the leaf node is a left child
            or a right child. If the new node is a right child the balance factor of
            the parent will be reduced by one. If the new node is a left child then
            the balance factor of the parent will be increased by one. This relation
            can be applied recursively to the grandparent of the new node, and
            possibly to every ancestor all the way up to the root of the tree. Since
            this is a recursive procedure let us examine the two base cases for
            updating balance factors:</p>
        <p><ul>
            <li>
                <p>The recursive call has reached the root of the tree.</p>
            </li>
            <li>
                <p>The balance factor of the parent has been adjusted to zero. You
                    should convince yourself that once a subtree has a balance factor of
                    zero, then the balance of its ancestor nodes does not change.</p>
            </li>
        </ul></p>
        <p>We will implement the AVL tree as a subclass of <c>BinarySearchTree</c>. To
            begin, we will override the <c>_put</c> method and write a new
            <c>updateBalance</c> helper method. These methods are shown in
            <xref ref="trees_lst-updbal"/>. You will notice that the definition for <c>_put</c> is
            exactly the same as in simple binary search trees except for the additions of
            the calls to <c>updateBalance</c> on lines<nbsp/>8 and<nbsp/>17 of the C++ version.</p>

        <exploration xml:id="trees_lst-updbal">
            <title>Implementation of <c>_put</c> and <c>updateBalance</c></title>
            <task label="task-trees_lst-updbal-prog">
                <title>C++ Implementation</title>
                <statement>
            <program line-numbers="yes" language="cpp" label="trees_lst-updbal-prog"><code>
void _put(int key, string val, TreeNode *currentNode){
    if (key &lt; currentNode-&gt;key){
        if (currentNode-&gt;hasLeftChild()){
            this-&gt;_put(key, val, currentNode-&gt;leftChild);
        }
        else{
            currentNode-&gt;leftChild = new TreeNode(key, val, currentNode);
            this-&gt;updateBalance(currentNode-&gt;leftChild);
        }
    }
    else{
        if (currentNode-&gt;hasRightChild()){
            this-&gt;_put(key, val, currentNode-&gt;rightChild);
        }
        else{
            currentNode-&gt;rightChild = new TreeNode(key, val, currentNode);
            this-&gt;updateBalance(currentNode-&gt;rightChild);
        }
    }
}

int updateBalance(TreeNode *node){
    if (node-&gt;balanceFactor &gt; 1 || node-&gt;balanceFactor &lt; -1){
        this-&gt;rebalance(node);
        return 0;
    }
    if (node-&gt;parent != nullptr){
        if (node-&gt;isLeftChild()){
            node-&gt;parent-&gt;balanceFactor += 1;
        }
        else if (node-&gt;isRightChild()){
            node-&gt;parent-&gt;balanceFactor -= 1;
        }
        if (node-&gt;parent-&gt;balanceFactor != 0){
            this-&gt;updateBalance(node-&gt;parent);
        }
    }
    return 0;
}
</code></program>
            </statement>
        </task>
        <task label="task-trees_lst-updbal-prog-py">
            <title>Python Implementation</title>
            <statement>
        <program line-numbers="yes" language="python" label="trees_lst-updbal-prog-py">
    <code> 
class AVLTree:
    # Other method definitions
    # ... 

    def _put(self, key, value, current_node):
        if key &lt; current_node.key:
            if current_node.has_left_child():
                self._put(key, value, current_node.left_child)
            else:
                current_node.left_child= TreeNode(key, value, current_node)
                self.update_balance(current_node.left_child)
        else:
            if current_node.has_right_child():
                self._put(key, value, current_node.right_child)
            else:
                current_node.right_child= TreeNode(key, value, current_node)
                self.update_balance(current_node.right_child)

    
    def update_balance(self, node): 
        if node.balance_factor &gt; 1 or node.balance_factor &lt; -1:
            self.rebalance(node)
            return 0

        if node.parent is not None:
            if node.is_left_child():
                node.parent.balance_factor += 1
            elif node.is_right_child():
                node.parent.balance_factor -= 1

        if node.parent.balance_factor != 0:
            self.update_balance(node.parent)

    return 0

    </code>
</program>
        </statement>
        </task>
</exploration>
        
        <p>The new <c>updateBalance</c> method is where most of the work is done. The
            <c>updateBalance</c> method first checks to see if the current node is out
            of balance enough to require rebalancing (line<nbsp/>23). If that
            is the case then the rebalancing is done and no further updating to
            parents is required. If the current node does not require rebalancing
            then the balance factor of the parent is adjusted. If the balance factor
            of the parent is non-zero then the algorithm continues to work its way
            up the tree toward the root by recursively calling <c>updateBalance</c> on
            the parent.</p>
        <p>When a rebalancing of the tree is necessary, how do we do it? Efficient
            rebalancing is the key to making the AVL Tree work well without
            sacrificing performance. In order to bring an AVL Tree back into balance
            we will perform one or more <term>rotations</term> on the tree.</p>
        <p>To understand what a rotation is let us look at a very simple example.
            Consider the tree in the left half of <xref ref="fig-unbalsimple"/>. This tree
            is out of balance with a balance factor of -2. To bring this tree into
            balance we will use a left rotation around the subtree rooted at node A.</p>
        
        <figure xml:id="fig-unbalsimple">
            <caption>Transforming an Unbalanced Tree Using a Left Rotation.</caption>
            <image source="Trees/simpleunbalanced.png" width="70%"> 
            <description>
                <p>
                    Image illustrating the transformation of an unbalanced binary tree using a left rotation. 
                    The initial tree on the left has a root node &quot;A&quot; with a balance factor of -2, indicating it is out of balance. 
                    Node &quot;A&quot; has a right child &quot;B&quot; with a balance factor of -1, and node &quot;B&quot; has a right child &quot;C.&quot; 
                    An arrow points to the resulting balanced tree on the right, where &quot;B&quot; becomes the new root, 
                    &quot;A&quot; becomes the left child of &quot;B,&quot; and &quot;C&quot; remains the right child of &quot;B.&quot; 
                    All nodes in the resulting tree have a balance factor of 0, restoring balance to the structure.
                </p>
            </description>
            </image>
        </figure>
        <p>To perform a left rotation we essentially do the following:</p>
        <p><ul>
            <li>
                <p>Promote the right child (B) to be the root of the subtree.</p>
            </li>
            <li>
                <p>Move the old root (A) to be the left child of the new root.</p>
            </li>
            <li>
                <p>If new root (B) already had a left child then make it the right child
                    of the new left child (A). Note: Since the new root (B) was the right
                    child of A the right child of A is guaranteed to be empty at this
                    point. This allows us to add a new node as the right child without
                    any further consideration.</p>
            </li>
        </ul></p>
        <p>While this procedure is fairly easy in concept, the details of the code
            are a bit tricky since we need to move things around in just the right
            order so that all properties of a Binary Search Tree are preserved.
            Furthermore we need to make sure to update all of the parent pointers
            appropriately.</p>
        <p>Let's look at a slightly more complicated tree to illustrate the right
            rotation. The left side of <xref ref="fig-rightrot1"/> shows a tree that is
            left-heavy and with a balance factor of 2 at the root. To perform a
            right rotation we essentially do the following:</p>
        <p><ul>
            <li>
                <p>Promote the left child (C) to be the root of the subtree.</p>
            </li>
            <li>
                <p>Move the old root (E) to be the right child of the new root.</p>
            </li>
            <li>
                <p>If the new root(C) already had a right child (D) then make it the
                    left child of the new right child (E). Note: Since the new root (C)
                    was the left child of E, the left child of E is guaranteed to be
                    empty at this point. This allows us to add a new node as the left
                    child without any further consideration.</p>
            </li>
        </ul></p>
        
        <figure xml:id="fig-rightrot1">
            <caption>Transforming an Unbalanced Tree Using a Right Rotation.</caption>
            <image source="Trees/rightrotate1.png" width="70%"> 
                <description>
                    <p>
                        Image illustrating the transformation of an unbalanced binary tree using a right rotation. 
                        The initial tree on the left has the root node &quot;E&quot; with a balance factor of 2, making it left-heavy. 
                        Node &quot;E&quot; has a left child &quot;C,&quot; which in turn has children &quot;B&quot; and &quot;D.&quot; Node &quot;B&quot; further has a left child &quot;A.&quot;
                        An arrow points to the balanced tree on the right, where &quot;C&quot; becomes the new root. Node &quot;E&quot; becomes 
                        the right child of &quot;C,&quot; while &quot;B&quot; remains the left child of &quot;C&quot; and &quot;A&quot; remains the left child of &quot;B.&quot;
                        Node &quot;D&quot; is repositioned as the left child of &quot;E.&quot; The resulting tree is balanced, with updated relationships 
                        between nodes to satisfy the balance factor constraints.
                    </p>
                </description>
            </image>
        </figure>
        <p>Now that you have seen the rotations and have the basic idea of how a
            rotation works let us look at the code. <xref ref="trees_lst-bothrotations"/> shows the
            code for both the right and the left rotations. In line<nbsp/>2
            we create a temporary variable to keep track of the new root of the
            subtree. As we said before the new root is the right child of the
            previous root. Now that a reference to the right child has been stored
            in this temporary variable we replace the right child of the old root
            with the left child of the new.</p>
        <p>The next step is to adjust the parent pointers of the two nodes. If
            <c>newRoot</c> has a left child then the new parent of the left child
            becomes the old root. The parent of the new root is set to the parent of
            the old root. If the old root was the root of the entire tree then we
            must set the root of the tree to point to this new root. Otherwise, if
            the old root is a left child then we change the parent of the left child
            to point to the new root; otherwise we change the parent of the right
            child to point to the new root. (lines<nbsp/>11-18).
            Finally we set the parent of the old root to be the new root. This is a
            lot of complicated bookkeeping, so we encourage you to trace through
            this function while looking at <xref ref="fig-unbalsimple"/>. The
            <c>rotateRight</c> method is symmetrical to <c>rotateLeft</c> so we will leave
            it to you to study the code for <c>rotateRight</c>.</p>

        <listing xml:id="trees_lst-bothrotations">
            <title>Implementation of <c>rotateLeft</c> and <c>rotateRight</c></title>
            <program language="cpp" line-numbers="yes" label="trees_lst-bothrotations-prog"><code>
void rotateLeft(TreeNode *rotRoot){
    TreeNode *newRoot = rotRoot-&gt;rightChild;
    rotRoot-&gt;rightChild = newRoot-&gt;leftChild;
    if (newRoot-&gt;leftChild != nullptr){
        newRoot-&gt;leftChild-&gt;parent = rotRoot;
    }
    newRoot-&gt;parent = rotRoot-&gt;parent;
    if (rotRoot-&gt;isRoot()){
        this-&gt;root = newRoot;
    }
    else{
        if (rotRoot-&gt;isLeftChild()){
            rotRoot-&gt;parent-&gt;leftChild = newRoot;
        }
        else{
            rotRoot-&gt;parent-&gt;rightChild = newRoot;
        }
    }
    newRoot-&gt;leftChild = rotRoot;
    rotRoot-&gt;parent = newRoot;
    rotRoot-&gt;balanceFactor = rotRoot-&gt;balanceFactor + 1 - min(newRoot-&gt;balanceFactor, 0);
    newRoot-&gt;balanceFactor = newRoot-&gt;balanceFactor + 1 + max(rotRoot-&gt;balanceFactor, 0);
}
            </code></program>
        </listing>

        <p>Finally, lines<nbsp/>21-22 require some explanation. In
            these two lines we update the balance factors of the old and the new
            root. Since all the other moves are moving entire subtrees around the
            balance factors of all other nodes are unaffected by the rotation. But
            how can we update the balance factors without completely recalculating
            the heights of the new subtrees? The following derivation should
            convince you that these lines are correct.</p>
        
        <figure xml:id="trees-avl-fig-bfderive">
            <caption>A Left Rotation.</caption>
            <image source="Trees/bfderive.png" width="70%"> 
            <description>
                <p>
                    Image illustrating a left rotation in a binary tree. The diagram consists of two stages: the initial tree structure and the 
                    resulting tree after the rotation.
                    In the initial tree, node &quot;B&quot; is the root, with node &quot;A&quot; as its left child and node &quot;D&quot; as its right child. Node &quot;D&quot; has two 
                    subtrees, &quot;C&quot; as its left child and &quot;E&quot; as its right child.
                    After the left rotation, node &quot;D&quot; becomes the new root, with node &quot;B&quot; as its left child and node &quot;E&quot; as its right child. Node &quot;B&quot; 
                    retains &quot;A&quot; as its left child and &quot;C&quot; as its right child. The arrow between the two stages indicates the direction of the rotation.
                    This figure demonstrates the rebalancing operation in a binary tree by performing a left rotation.
                </p>
                </description>
            </image>
        </figure>
        <p><xref ref="trees-avl-fig-bfderive"/> shows a left rotation. B and D are the pivotal
            nodes and A, C, E are their subtrees. Let <m>h_x</m> denote the
            height of a particular subtree rooted at node <m>x</m>. By definition
            we know the following:
            <me>
                \begin{split}
                newBal(B) &amp; = h_A - h_C \\
                oldBal(B) &amp;= h_A - h_D
                \end{split}
            </me></p>
        <p>But we know that the old height of D can also be given by <m>1 +
                max(h_C,h_E)</m>, that is, the height of D is one more than the maximum
            height of its two children. Remember that <m>h_c</m> and
            <m>h_E</m> hav not changed. So, let us substitute that in to the
            second equation, which gives us</p>
        <p><me>oldBal(B) = h_A - (1 + max(h_C,h_E))</me></p>
        <p>and then subtract the two equations. The following steps
            do the subtraction and use some algebra to simplify the equation for
            <m>newBal(B)</m>.
            <me>\begin{split}
            newBal(B) - oldBal(B) &amp;= h_A - h_C - (h_A - (1 + max(h_C,h_E))) \\
            newBal(B) - oldBal(B) &amp;= h_A - h_C - h_A + (1 + max(h_C,h_E)) \\
            newBal(B) - oldBal(B) &amp;= h_A  - h_A + 1 + max(h_C,h_E) - h_C  \\
            newBal(B) - oldBal(B) &amp;=  1 + max(h_C,h_E) - h_C
            \end{split}</me></p>
        <p>Next we will move <m>oldBal(B)</m> to the right hand side of the
            equation and make use of the fact that
            <m>max(a,b)-c = max(a-c, b-c)</m>.
        <me>newBal(B) = oldBal(B) + 1 + max(h_C - h_C ,h_E - h_C)</me></p>
        <p>But, <m>h_E - h_C</m> is the same as <m>-oldBal(D)</m>. So we can
            use another identity that says <m>max(-a,-b) = -min(a,b)</m>. So we
            can finish our derivation of <m>newBal(B)</m> with the following
            steps:
            <me>
                \begin{split}
                newBal(B) &amp; = oldBal(B) + 1 + max(0 , -oldBal(D)) \\
                newBal(B) &amp; = oldBal(B) + 1 - min(0 , oldBal(D))
                \end{split}
            </me></p>
        <p>Now we have all of the parts in terms that we readily know. If we
            remember that B is <c>rotRoot</c> and D is <c>newRoot</c> then we can see this
            corresponds exactly to the statement on line<nbsp/>21, or:</p>
        <program language="cpp" label="AVLTreeImplementation-prog"><code>
rotRoot.balanceFactor = rotRoot.balanceFactor + 1 - min(0,newRoot.balanceFactor)
</code></program>
        <p>A similar derivation gives us the equation for the updated node D, as
            well as the balance factors after a right rotation. We leave these as
            exercises for you.</p>
        <p>Now you might think that we are done. We know how to do our left and
            right rotations, and we know when we should do a left or right rotation,
            but take a look at <xref ref="avlimpl_fig-hardrotate"/>. Since node A has a balance
            factor of -2 we should do a left rotation. But, what happens when we do
            the left rotation around A?</p>
        
        <figure xml:id="avlimpl_fig-hardrotate">
            <caption>An Unbalanced Tree that is More Difficult to Balance.</caption>
            <image source="Trees/hardunbalanced.png" width="20%"> 
            <description>
                <p>
                    Image showing an unbalanced binary tree with three nodes labeled &quot;A,&quot; &quot;C,&quot; and &quot;B.&quot; Node &quot;A&quot; is the root, with a balance factor 
                    of -2, indicating that its right subtree is significantly taller than its left subtree. Node &quot;C&quot; is the right child of &quot;A,&quot; 
                    with a balance factor of 1, meaning its left subtree is taller than its right subtree. Node &quot;B&quot; is the left child of &quot;C,&quot; with 
                    a balance factor of 0, indicating it is balanced. The structure of the tree demonstrates a more complex scenario for balancing 
                    due to conflicting balance factors at different levels.
                </p>
            </description>
            </image>
        </figure>
        <p><xref ref="avlimpl_fig-badrotate"/> shows us that after the left rotation we are now
            out of balance the other way. If we do a right rotation to correct the
            situation we are right back where we started.</p>
        
        <figure xml:id="avlimpl_fig-badrotate">
            <caption>After a Left Rotation the Tree is Out of Balance in the Other Direction.</caption>
            <image source="Trees/badrotate.png" width="20%"> 
            <description>
                <p>
                    Image showing the state of a binary tree after a left rotation around node &quot;A.&quot; Node &quot;C&quot; becomes the new root with a balance factor 
                    of 2, indicating that its left subtree is much taller than its right subtree. Node &quot;A&quot; becomes the left child of &quot;C,&quot; with a balance 
                    factor of -1, meaning its right subtree is taller than its left subtree. Node &quot;B&quot; remains the left child of &quot;A,&quot; with a balance 
                    factor of 0, indicating it is balanced. This new configuration highlights that the tree is now out of balance in the opposite 
                    direction, necessitating further adjustments.
                </p>
            </description>
            </image>
        </figure>
        <p>To correct this problem we must use the following set of rules:</p>
        <p><ul>
            <li>
                <p>If a subtree needs a left rotation to bring it into balance, first
                    check the balance factor of the right child. If the right child is
                    left heavy then do a right rotation on right child, followed by the
                    original left rotation.</p>
            </li>
            <li>
                <p>If a subtree needs a right rotation to bring it into balance, first
                    check the balance factor of the left child. If the left child is
                    right heavy then do a left rotation on the left child, followed by
                    the original right rotation.</p>
            </li>
        </ul></p>
        <p><xref ref="avlimpl_fig-rotatelr"/> shows how these rules solve the dilemma we
            encountered in <xref ref="avlimpl_fig-hardrotate"/> and <xref ref="avlimpl_fig-badrotate"/>. Starting
            with a right rotation around node C puts the tree in a position where
            the left rotation around A brings the entire subtree back into balance.</p>
        
        <figure xml:id="avlimpl_fig-rotatelr">
            <caption>A Right Rotation Followed by a Left Rotation.</caption>
            <image source="Trees/rotatelr.png" width="80%"> 
            <description>
                <p>
                    Image showing the process of rebalancing a binary tree using a right rotation followed by a left rotation. 
                    The diagram consists of three stages.
                    In the first stage, the unbalanced tree has node &quot;A&quot; as the root with a balance factor of -2. Node &quot;C&quot; is the right child of 
                    &quot;A,&quot; with a balance factor of 1, and &quot;B&quot; is the left child of &quot;C.&quot; This configuration necessitates rebalancing.
                    In the second stage, a right rotation is performed around node &quot;C.&quot; Node &quot;B&quot; becomes the right child of &quot;A,&quot; and &quot;C&quot; becomes 
                    the right child of &quot;B.&quot; This step resolves the imbalance between nodes &quot;C&quot; and &quot;B.&quot;
                    In the third stage, a left rotation is performed around node &quot;A.&quot; Node &quot;B&quot; becomes the new root, with &quot;A&quot; as its left child 
                    and &quot;C&quot; as its right child. The tree is now fully balanced, with all nodes having a balance factor of 0.
                    Arrows between the stages indicate the direction of the rotations, and balance factors are displayed to emphasize the changes 
                    during the process.
                </p>
            </description>
            </image>
        </figure>
        <p>The code that implements these rules can be found in our <c>rebalance</c>
            method, which is shown in <xref ref="avlimpl_lst-rebalance"/>. Rule number 1 from
            above is implemented by the <c>if</c> statement starting on line<nbsp/>2.
            Rule number 2 is implemented by the <c>else if</c> statement starting on
            line 11.</p>
        
        <listing xml:id="avlimpl_lst-rebalance">
            <title>Implementation of <c>rebalance</c></title>
            <program language="cpp" line-numbers="yes" label="avlimpl_lst-rebalance-prog"><code>
void rebalance(TreeNode *node){
    if (node-&gt;balanceFactor &lt; 0){
        if (node-&gt;rightChild-&gt;balanceFactor &gt; 0){
            this-&gt;rotateRight(node-&gt;rightChild);
            this-&gt;rotateLeft(node);
        }
        else{
            this-&gt;rotateLeft(node);
        }
    }
    else if (node-&gt;balanceFactor &gt; 0){
        if (node-&gt;leftChild-&gt;balanceFactor &lt; 0){
            this-&gt;rotateLeft(node-&gt;leftChild);
            this-&gt;rotateRight(node);
        }
        else {
            this-&gt;rotateRight(node);
        }
    }
}
            </code></program>
        </listing>
        <p>The <inline classes="xref std std-ref">discussion questions</inline> provide you the opportunity to rebalance a tree
            that requires a left rotation followed by a right. In addition the
            discussion questions provide you with the opportunity to rebalance some
            trees that are a little more complex than the tree in
            <xref ref="avlimpl_fig-rotatelr"/>.</p>
        <p>By keeping the tree in balance at all times, we can ensure that the
            <c>get</c> method will run in order <m>O(\log_2(n))</m> time. But the
            question is at what cost to our <c>put</c> method? Let us break this down
            into the operations performed by <c>put</c>. Since a new node is inserted
            as a leaf, updating the balance factors of all the parents will require
            a maximum of <m>\log_2(n)</m> operations, one for each level of the
            tree. If a subtree is found to be out of balance a maximum of two
            rotations are required to bring the tree back into balance. But, each of
            the rotations works in <m>O(1)</m> time, so even our <c>put</c>
            operation remains <m>O(\log_2(n))</m>.</p>
        <p>At this point we have implemented a functional AVL-Tree, unless you need
            the ability to delete a node. We leave the deletion of the node and
            subsequent updating and rebalancing as an exercise for you.</p>
<reading-questions xml:id="rqs-avl-tree-impl">
    <title>Reading Question</title>

    <exercise label="AVLbalancetree">
        <statement>

        <p>How does adding a new leaf in an AVL Tree affect the parent's balance factor?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>A left leaf reduces the balance factor by 1</p>
                </statement>
                <feedback>
                    <p>Carefully think about what you read in AVL performance</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>A right leaf reduces the balance factor by 2</p>
                </statement>
                <feedback>
                    <p>Carefully think about what you read in AVL performance</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>A left leaf increases the balance factor by 1 and the right leaf reduces the balance factor by 1 and does not affect the grandparent's balance factor</p>
                </statement>
                <feedback>
                    <p>Carefully think about what you read in AVL performance</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>A left leaf increases the balance factor by 1 and the right leaf reduces the balance factor by 1 of the parent</p>
                </statement>
                <feedback>
                    <p>Correct!</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>The leaves do not affect the parent's balance factor, only the ancestor nodes</p>
                </statement>
                <feedback>
                    <p>Carefully think about what you read in AVL performance</p>
                </feedback>
            </choice>
</choices>

    </exercise>
</reading-questions>
    </section>
