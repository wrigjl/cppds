<?xml version="1.0" ?><section xml:id="trees_list-of-lists-representation">
        <title>List of Lists Representation</title>
        <p>In a tree represented by a list of lists, we will begin
            with Python's list data structure and write the functions defined above.
            Although writing the interface as a set of operations on a list is a bit
            different from the other abstract data types we have implemented, it is
            interesting to do so because it provides us with a simple recursive data
            structure that we can look at and examine directly. In a list of lists
            tree, we will store the value of the root node as the first element of
            the list. The second element of the list will itself be a list that
            represents the left subtree. The third element of the list will be
            another list that represents the right subtree. To illustrate this
            storage technique, let's look at an example. <xref ref="fig-smalltree"/>
            shows a simple tree and the corresponding list implementation.</p>
        
        <figure align="center" xml:id="fig-smalltree"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 1: A Small Tree</caption><image source="Trees/Figures/smalltree.png" width="50%"/></figure>
        <pre>myTree = ['a',   #root
      ['b',  #left subtree
       ['d', [], []],
       ['e', [], []] ],
      ['c',  #right subtree
       ['f', [], []],
       [] ]
     ]</pre>
        <p>Notice that we can access subtrees of the list using standard list
            indexing. The root of the tree is <c>myTree[0]</c>, the left subtree of the
            root is <c>myTree[1]</c>, and the right subtree is <c>myTree[2]</c>. <xref ref="lst-treelist1"/> illustrates creating a simple tree using a
            list. Once the tree is constructed, we can access the root and the left
            and right subtrees. One very nice property of this list of lists
            approach is that the structure of a list representing a subtree adheres
            to the structure defined for a tree; the structure itself is recursive!
            A subtree that has a root value and two empty lists is a leaf node.
            Another nice feature of the list of lists approach is that it
            generalizes to a tree that has many subtrees. In the case where the tree
            is more than a binary tree, another subtree is just another list.</p>
        

    <program xml:id="tree_list1" interactive="activecode" language="python" label="tree_list1-prog">
        <code>
myTree = ['a', ['b', ['d',[],[]], ['e',[],[]] ], ['c', ['f',[],[]], []] ]
print(myTree)
print('left subtree = ', myTree[1])
print('root = ', myTree[0])
print('right subtree = ', myTree[2])
        </code>
    </program>
        <p>Let's formalize this definition of the tree data structure by providing
            some functions that make it easy for us to use lists as trees. Note that
            we are not going to define a binary tree class. The functions we will
            write will just help us manipulate a standard list as though we are
            working with a tree.</p>
        <pre>def BinaryTree(r):
    return [r, [], []]</pre>
        <p>The <c>BinaryTree</c> function simply constructs a list with a root node
            and two empty sublists for the children. To add a left subtree to the
            root of a tree, we need to insert a new list into the second position of
            the root list. We must be careful. If the list already has something in
            the second position, we need to keep track of it and push it down the
            tree as the left child of the list we are adding. <xref ref="lst-linsleft"/>
            shows the Python code for inserting a left child.</p>
        
        <p xml:id="trees_lst-linsleft" names="lst_linsleft"><term>Listing 1</term></p>
        <pre>def insertLeft(root,newBranch):
    t = root.pop(1)
    if len(t) &gt; 1:
        root.insert(1,[newBranch,t,[]])
    else:
        root.insert(1,[newBranch, [], []])
    return root</pre>
        <p>Notice that to insert a left child, we first obtain the (possibly empty)
            list that corresponds to the current left child. We then add the new
            left child, installing the old left child as the left child of the new
            one. This allows us to splice a new node into the tree at any position.
            The code for <c>insertRight</c> is similar to <c>insertLeft</c> and is shown
            in <xref ref="lst-linsright"/>.</p>
        
        <p xml:id="trees_lst-linsright" names="lst_linsright"><term>Listing 2</term></p>
        <pre>def insertRight(root,newBranch):
    t = root.pop(2)
    if len(t) &gt; 1:
        root.insert(2,[newBranch,[],t])
    else:
        root.insert(2,[newBranch,[],[]])
    return root</pre>
        <p>To round out this set of tree-making functions(see <xref ref="lst-treeacc"/>), let's write a couple of
            access functions for getting and setting the root value, as well as
            getting the left or right subtrees.</p>
        
        <p xml:id="trees_lst-treeacc" names="lst_treeacc"><term>Listing 3</term></p>
        <pre>def getRootVal(root):
    return root[0]

def setRootVal(root,newVal):
    root[0] = newVal

def getLeftChild(root):
    return root[1]

def getRightChild(root):
    return root[2]</pre>
        <p><xref ref="lst-bintreetry"/> exercises the tree
            functions we have just written. You should try it
            out for yourself. One of the exercises asks you to draw the tree
            structure resulting from this set of calls.</p>
        

    <program xml:id="bin_tree" interactive="activecode" language="python" label="bin_tree-prog">
        <code>
def BinaryTree(r):
    return [r, [], []]

def insertLeft(root,newBranch):
    t = root.pop(1)
    if len(t) &gt; 1:
        root.insert(1,[newBranch,t,[]])
    else:
        root.insert(1,[newBranch, [], []])
    return root

def insertRight(root,newBranch):
    t = root.pop(2)
    if len(t) &gt; 1:
        root.insert(2,[newBranch,[],t])
    else:
        root.insert(2,[newBranch,[],[]])
    return root

def getRootVal(root):
    return root[0]

def setRootVal(root,newVal):
    root[0] = newVal

def getLeftChild(root):
    return root[1]

def getRightChild(root):
    return root[2]

def main():
    r = BinaryTree(3)
    insertLeft(r,4)
    insertLeft(r,5)
    insertRight(r,6)
    insertRight(r,7)
    l = getLeftChild(r)
    print(l)

    setRootVal(l,9)
    print(r)
    insertLeft(l,11)
    print(r)
    print(getRightChild(getRightChild(r)))
main()
        </code>
    </program>
        <note>
            <title>Self Check</title>

    <exercise label="mctree_1">
        <statement>

            <p>Q-3: Given the following statements:</p>
            <program language="python" label="ListofListsRepresentation-prog"><code>
x = BinaryTree('a')
insertLeft(x,'b')
insertRight(x,'c')
insertRight(getRightChild(x),'d')
insertLeft(getRightChild(getRightChild(x)),'e')
</code></program>
            <p>Which of the answers is the correct representation of the tree?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>['a', ['b', [], []], ['c', [], ['d', [], []]]]</p>
                </statement>
                <feedback>
                    <p>Not quite, this tree is missing the 'e' node.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>['a', ['c', [], ['d', ['e', [], []], []]], ['b', [], []]]</p>
                </statement>
                <feedback>
                    <p>This is close, but if you carefully you will see that the left and right children of the root are swapped.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>['a', ['b', [], []], ['c', [], ['d', ['e', [], []], []]]]</p>
                </statement>
                <feedback>
                    <p>Very good</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>['a', ['b', [], ['d', ['e', [], []], []]], ['c', [], []]]</p>
                </statement>
                <feedback>
                    <p>This is close, but the left and right child names have been swapped along with the underlying structures.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

<exercise label="mctree_2">
    <statement>
            <p>Write a function <c>buildTree</c> that returns a tree using the list of lists functions that looks like this:</p>
            <image source="Trees/Figures/tree_ex.png" width="50%"/>

    </statement>
    <program xml:id="mctree_2_editor" interactive="activecode" language="python" label="mctree_2_editor-prog">
        <code>
from test import testEqual

def buildTree():
    pass

def main():
    ttree = buildTree()
    testEqual(getRootVal(getRightChild(ttree)),'c')
    testEqual(getRootVal(getRightChild(getLeftChild(ttree))),'d')
    testEqual(getRootVal(getRightChild(getRightChild(ttree))),'f')
main()
        </code>
    </program>
</exercise>
        </note>
    </section>
