<?xml version="1.0"?>
<section xml:id="algorithmanalysis_algorithm-analysis_self-check">
  <title>Self Check</title>
  <exercise label="bigOefficiency">
    <statement>
      <p>Which of the following algorithms has the least efficient big O complexity?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p><m>10000(n^3 + n^2)</m></p>
        </statement>
        <feedback>
          <p>Incorrect, even though <m>n^3</m> is the most significant part for all of these formulas, the way it interacts with the rest of the equation is also important to note.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p><m>45 n^3 + 1710 n^2 + 16 n + 5</m></p>
        </statement>
        <feedback>
          <p>Incorrect, even though <m>n^3</m> is the most significant part for all of these formulas, the way it interacts with the rest of the equation is also important to note.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p><m>(n^3 + n) (n^2 + 1)</m></p>
        </statement>
        <feedback>
          <p>Correct!</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>A and B would be equally efficient/inefficient</p>
        </statement>
        <feedback>
          <p>Look closer, the efficiencies would be different</p>
        </feedback>
      </choice>
    </choices>
  </exercise>

  <exercise label="growth">
    <statement>
      <p>Drag the order of growth rates to their rankings from lowest to highest (the slowest i.e. the highest growth rate should be #1)</p>
    </statement>
    <feedback>
      <p>Compare the functions at different values to see how they compare</p>
    </feedback>
    <cardsort>
      <match>
        <premise order="1"><m>2^n</m></premise>
        <response>1st</response>
      </match>
      <match>
        <premise order="2"><m>n^2</m></premise>
        <response>2nd</response>
      </match>
      <match>
        <premise order="3"><m>n \log n</m></premise>
        <response>3rd</response>
      </match>
      <match>
        <premise order="4"><m>\log n</m></premise>
        <response>4th</response>
      </match>
    </cardsort>
  </exercise>

  <exercise label="resources">
    <statement>
      <p>When considering computer resources, what factors do we have in mind? Select all that apply.</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>language constraints</p>
        </statement>
        <feedback>
          <p>No, we do not consider the restraints of a language when thinking about how efficient an algorithm is.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Space</p>
        </statement>
        <feedback>
          <p>Yes, we consider how much space we need to solve a problem.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Time</p>
        </statement>
        <feedback>
          <p>Yes, we consider how much time it takes to solve a problem</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Energy</p>
        </statement>
        <feedback>
          <p>No, we do not consider how much energy it takes at this point.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="bigO">
    <statement>
      <p>When considering the Big O of an algorithm, what do we use to quantify our description of an algorithm.</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>the space it takes</p>
        </statement>
        <feedback>
          <p>This can be dependent of the programming language</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>the time it takes</p>
        </statement>
        <feedback>
          <p>This can be dependent on the machine, programming language, and other factors</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>the number of steps</p>
        </statement>
        <feedback>
          <p>Yes, when quantifying the time it takes to execute an algorithm we base it on the number of steps it takes to solve the problem, not the time it takes</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>the readability of the code</p>
        </statement>
        <feedback>
          <p>No, a very efficient algorithm can be programmed efficiently in C++ without any extra spaces making it unreadable, however the solution would still be efficient.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <p>
    <!-- extra space before the progress bar -->
  </p>
</section>