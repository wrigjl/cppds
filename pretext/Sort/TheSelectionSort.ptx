<?xml version="1.0" ?><section xml:id="sort_the-selection-sort">
        <title>The Selection Sort</title>
        <p><idx>selection sort</idx> The <term>selection sort</term> improves on the bubble sort by making only one
            exchange for every pass through the first part of the vector.
            We will call this a step.
            In order to do this, a
            selection sort looks for the largest value as it makes a partial pass and, after
            completing the partial pass, places it in the proper location, ending the step.
            As with a bubble
            sort, after the first step, the largest item is in the correct place.
            After the second step, the next largest is in place. This process
            continues and requires <m>n-1</m> steps to sort <em>n</em> items, since the
            final item must be in place after the <m>(n-1)</m> step.</p>
        <p>On each step,
            the largest remaining item is selected and then placed in its proper
            location. The first pass places 93, the second pass places 77, the third
            places 55, and so on. The function is shown in <xref ref="lst-selectionsort-cpp"/> .</p>
        <exploration xml:id="expl-selectionsort">
            <title>Selection Sort</title>
            <task xml:id="lst-selectionsort-cpp" label="lst-selectionsort-cpp">
                <title>C++ Implementation</title>
                <statement><program xml:id="prog-selectionsort-cpp" interactive="activecode" language="cpp" label="prog-selectionsort-cpp-prog"><code>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;
//function that sorts through values in vector through selection sort
vector&lt;int&gt; selectionSort(vector&lt;int&gt; avector) {
    for (int fillslot = (avector.size() - 1); fillslot &gt;= 0; fillslot--) {
        int positionOfMax = 0;
        for (int location = 1; location &lt; fillslot + 1; location++) {
            if (avector[location] &gt; avector[positionOfMax]) {
                positionOfMax = location;
            }
        }

        int temp = avector[fillslot];
        avector[fillslot] = avector[positionOfMax];
        avector[positionOfMax] = temp;
    }
    return avector;
}

int main() {
    // Vector initialized using a static array
    static const int arr[] = {54, 26, 93, 17, 77, 31, 44, 55, 20};
    vector&lt;int&gt; avector (arr, arr + sizeof(arr) / sizeof(arr[0]) );

    // Call to the selectionSort function
    vector&lt;int&gt; updatedAvector = selectionSort(avector);

    // print the vector
    for (unsigned int i = 0; i &lt; updatedAvector.size(); i++) {
        cout &lt;&lt; updatedAvector[i] &lt;&lt; &quot; &quot;;
    }
    cout &lt;&lt; endl;

    return 0;
}
                </code></program></statement>
            </task>
            <task xml:id="lst-selectionsort-py" label="lst-selectionsort-py">
                <title>Python Implementation</title>
                <statement><program xml:id="prog-selectionsort-py" interactive="activecode" language="python" label="prog-selectionsort-py-prog"><code>
#function sorts through values in list using selection sort
def selectionSort(alist):
   for fillslot in range(len(alist)-1,0,-1):
       positionOfMax=0
       for location in range(1,fillslot+1):
           if alist[location]&gt;alist[positionOfMax]:
               positionOfMax = location

       temp = alist[fillslot]
       alist[fillslot] = alist[positionOfMax]
       alist[positionOfMax] = temp

def main():
    alist = [54,26,93,17,77,31,44,55,20]
    selectionSort(alist)
    print(alist)
main()

                </code></program></statement>
            </task>
        </exploration>
    <p>The visualization in <xref ref="sort_selectionsort-animation"/> allows you to step through the algorithm. Yellow bars
        represent the current element, red represents the element being looked at,
        and blue represents the last element to look at during a step.</p>

    <figure xml:id="sort_selectionsort-animation">
        <caption>Selection esort animation.</caption>
        <interactive platform="javascript" source="Sort/sortmodels.js" width="100%" aspect="10:8">
            <sidebyside width="90%">
                <slate aspect="10:6" xml:id="selection_anim_canvas" surface="canvas"/>
            </sidebyside>
            <sidebyside widths="18% 18% 18% 18% 18%">
                <slate surface="html">
                    <input xmlns="http://www.w3.org/1999/xhtml" type="button" value="Initialize" onkeypress="selection_anim_anim = selection_anim_init('selection_anim');" onclick="selection_anim_anim = selection_anim_init('selection_anim');" style="font-size:16px; width:100%"/>
                </slate>
                <slate surface="html">
                    <input xmlns="http://www.w3.org/1999/xhtml" type="button" value="Run" onkeypress="selection_anim_anim.run('selection_anim_anim');" onclick="selection_anim_anim.run('selection_anim_anim');" style="font-size:16px; width:100%"/>
                </slate>
                <slate surface="html">
                    <input xmlns="http://www.w3.org/1999/xhtml" type="button" value="Stop" onkeypress="selection_anim_anim.stop();" onclick="selection_anim_anim.stop();" style="font-size:16px; width:100%"/>
                </slate>
                <slate surface="html">
                    <input xmlns="http://www.w3.org/1999/xhtml" type="button" value="Beginning" onkeypress="selection_anim_anim.begin();" onclick="selection_anim_anim.begin();" style="font-size:16px; width:100%"/>
                </slate>
                <slate surface="html">
                    <input xmlns="http://www.w3.org/1999/xhtml" type="button" value="End" onkeypress="selection_anim_anim.end();" onclick="selection_anim_anim.end();" style="font-size:16px; width:100%"/>
                </slate>
            </sidebyside>
            <sidebyside widths="30% 30%" margins="20%">
                <slate surface="html">
                    <input xmlns="http://www.w3.org/1999/xhtml" type="button" value="Step Forward" onkeypress="selection_anim_anim.forward();" onclick="selection_anim_anim.forward();" style="font-size:16px; width:100%"/>
                </slate>
                <slate surface="html">
                    <input xmlns="http://www.w3.org/1999/xhtml" type="button" value="Step Backward" onkeypress="selection_anim_anim.backward();" onclick="selection_anim_anim.backward();" style="font-size:16px; width:100%"/>
                </slate>
            </sidebyside>
            <script><![CDATA[
                // Load the rest of the scripts
                // I can't figure out a better way to load multiple scripts in pretext

                var script = document.createElement('script');
                script.src = 'external/Sort/animationbase.js';
                document.body.appendChild(script);

                script = document.createElement('script');
                script.src = 'external/Sort/sortviewers.js';
                document.body.appendChild(script);

                selection_anim_init = function(divid)
                {
                    var a = new Animator(new MergeSortModel(), new BarViewer(), divid)
                    a.init()
                    return a
                }
            ]]></script>
        </interactive>
    </figure>

    <p>The video in <xref ref="sort_selection-video"/> shows selection sort in action. Each pass compares the bars
        in sequential order. The smallest bar is selected on each pass and is set as the minimum,
        represented in orange. Every remaining bar is then compared to the minimum. If the bar is
        larger, it is represented in blue, if it is smaller, it becomes the new orange bar.
        After each pass, a counter will increment which bar in our container will start with.
        This increment is representedby a thin black line falling before the bar to be started at.</p>

    <figure xml:id="sort_selection-video">
        <caption>Video of <c>selectionSort</c> in action.</caption>
        <video label="sort_selection_sort-video" source="Sort/vis_selection_sort.webm" width="80%" preview="Sort/vis_selection_sort_thumb.png"/>
    </figure>


    <p>You may see that the selection sort makes the same number of comparisons
        as the bubble sort and is therefore also <m>O(n^{2})</m>. However,
        due to the reduction in the number of exchanges, the selection sort
        typically executes faster in benchmark studies.</p>

    <reading-questions xml:id="rq-selection-sort">
    <exercise label="question_sort_2">
        <statement>

            <p>Suppose you have the following vector of numbers to sort:
                [11, 7, 12, 14, 19, 1, 6, 18, 8, 20] which vector represents the partially sorted (ascending) vector after three steps of selection sort?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>[7, 11, 12, 1, 6, 14, 8, 18, 19, 20]</p>
                </statement>
                <feedback>
                    <p>Selection sort is similar to bubble sort (which you appear to have done) but uses fewer swaps</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>[7, 11, 12, 14, 19, 1, 6, 18, 8, 20]</p>
                </statement>
                <feedback>
                    <p>This looks like an insertion sort.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>[11, 7, 12, 14, 1, 6, 8, 18, 19, 20]</p>
                </statement>
                <feedback>
                    <p>This one looks similar to the correct answer, however, it is not how selection sort works. With this answer, instead of swapping values through each sweep, the values have been shifted to the left to make room for the correct numbers.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>[11, 7, 12, 14, 8, 1, 6, 18, 19, 20]</p>
                </statement>
                <feedback>
                    <p>Selection sort improves upon bubble sort by making fewer swaps.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
</reading-questions>
    </section>
